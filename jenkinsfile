pipeline {
    agent any

    environment {
        IMAGE_NAME = 'flask_fernet_api'
        CONTAINER_NAME = 'flask_api_container'
        CONFIG_PATH = "${WORKSPACE}/conf.ini"
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Clone the repository from GitHub
                checkout scm
            }
        }

        stage('Set up Environment') {
            steps {
                // Install Python dependencies in a virtual environment for testing
                sh 'python3 -m venv venv'
                sh './venv/bin/pip install --upgrade pip'
                sh './venv/bin/pip install -r requirements.txt'
            }
        }

        stage('Run Tests') {
            steps {
                // Run unit tests
                sh './venv/bin/python -m unittest discover -s tests'
            }
        }

        stage('Build Docker Image') {
            steps {
                // Build the Docker image for the Flask application
                sh "docker build -t ${IMAGE_NAME} ."
            }
        }

        stage('Deploy Docker Container') {
            steps {
                // Stop and remove any existing container with the same name
                sh "docker stop ${CONTAINER_NAME} || true && docker rm ${CONTAINER_NAME} || true"
                
                // Run a new container with the built image and mount conf.ini
                sh """
                docker run -d --name ${CONTAINER_NAME} \
                    -p 5000:5000 \
                    -v ${CONFIG_PATH}:/app/conf.ini \
                    ${IMAGE_NAME}
                """
            }
        }
    }

    post {
        always {
            // Clean up the workspace and any generated files
            deleteDir()
        }
        success {
            echo 'Pipeline executed successfully.'
        }
        failure {
            echo 'Pipeline failed. Check the logs for more information.'
        }
    }
}
